-: docker pull centos   => to pull the image
-: docker run -it --name <container-name> centos /bin/bash  => to create the container from centos image
-: docker ps  => to list the active containers
-: docker ps -a  => to list the active and passive containers
-: docker restart <container-id/name>  => to restart the container
-: docker exec -it <container-id> /bin/bash  => to log in to the container
-: docker commit <container-id> "<image-name>"  => to create the image form container
-: docker build -f "<image-name>" .  => to create an image from dockerfile
Dockerfile:-
FROM centos
RUN yum install telnet -y && useradd anil  => to run the command inside the container
ENV MYCOURSE=DevOps  => to export the env variables
ADD mytarfile.tar /root/  => untar and copy the file
COPY mytarfile.tr /root/ => only copy the file
USER anil  => run an image with the user anil
EXPOSE 80  => to expose the container on port 80 
WORKDIR /root/mydir  => to specify the working dir in container
ENTRYPOINT ["/bin/bash", "/tmp/script1.sh"]  
CMD ["/bin/bash", "/tmp/script1.sh"]
-: CMD & ENTRYPOINT { "specifies the instruction that is to be executed when a Docker container starts. 
This CMD command is not really necessary for the container to work, can override the instructions 
as the echo command can be called in a RUN statement as well. 
The main purpose of the CMD command is to launch the software required in a container." }
-: ENTRYPOINT can not change execution of container, can not change the instructions and can append 
-: RUN - When you use a RUN command in your dockerfile, it always creates a new intermediate image layer on top of the previous ones.
-: CMD - A CMD command is used to set a default command that gets executed once you run the Docker Container.
         In case you provide a command with the Docker run command, the CMD arguments get ignored from the dockerfile.
         In the case of multiple CMD commands, only the last one gets executed.

   

-: docker run mydockerfile:cmd /bin/bash /tmp/script1.sh
-: docker run mydockerfile:entrypoint /bin/bash /tmp/script1.sh

{ docker volumes }
 - vgcreate myvg /dev/xvdf
 - lvcreate -L +4G -n mylv myvg
 - mkfs.ext4 /dev/myvg/mylv
 - mount -t ext4 /dev/myvg/mylv/ /mydocdata/
 -: docker run -it --name <container-name> -v /mydocdata/:/myapp centos /bin/bash  => to attach volume to the container
 -: man docker-run  => manual page to refer some options
 -: docker network create --driver=bridge --subnet=10.1.0.0/16 --ip-range=10.1.4.0/24 --gateway=10.1.0.1 anil-network  => to create the network
 { docker network type }
 -  bridge
 -  host
 -  none
 
 -: docker run -itd --name network1 --net  <network-name> centos /bin/bash  => to create the container with the specified network
 -: docker run -itd --name network1 --net  <network-name> --ip <ip-addr> centos /bin/bash  ==> to create the container with the specified IP\
 -: docker logs mycont1  => to check the container logs
 -: docker stats  => to check the memory and CPU utilization of container
 -: docker ps -q  => to list out the container id's
 -: docker rm -f <container-name>  => to remove container
 -: docker rm -f$(docker ps -q)  => to delete all the containers
 
 <== script to delete the docker images ==>
 for image in $(docker images|grep -v -e "centos\|REPOSITORY"|awk '{print $3}')
 do ocker rmi -f $image
 done
 
  - How to take up the backup of docker image?
    - docker save -o myimage.tar centos  => save the image in the form of tar file
    - docker load -i myimage.tar  => load the image through tar file
 
 -: docker tag centos:7 anil3078/centos:7  => to tag the docker image, its like a alias to the image
 -  How to pull docker image from private registery?
    - log in the docker hub
    - docker pull <image-name>
 -  How to push image to the private repository?
    - need to add the collaborators(user id) in collaborators section
    - images can be shared accross collaborators
    - first need to tag the image before push into the repo
    -: docker tag centos:7 anil3078/centos:7
    -  docker push <image-name> 
 
 -: docker run -d -p 8080:80 --name httpd-container httpd  => mapping the port to the container, 8080 is the host machine and 80 is the container por,
      container port is used only to communicate internally
      
 -: 
    
 
 
 

 
 
 
 
 
 
 
 
 
 
 
