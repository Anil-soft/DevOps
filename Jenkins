jenkins plugins:- ssh agent, pipeline, multibranch scan webhook trigger, ansible, github, Maven integration

* How to integrate ansible through jenkins

  Step:-1
  - Manage Jenkins -> Manage Plugins -> download the ansible plugin
  
  Step:-2
  - Global Tool Configuration -> Ansible (ansible installations)-> give the path where ansible should be executed (/usr/bin/ansible)
  
  Step:- 2
  Create the Pipeline job and wirte the pipeline script
  
  pipeline{
  agent any
  stages{
       stage ('SCM Checkout'){
            steps{
                git '<github-repo>'
            }
       }
       stage ('Execute Ansible'){
             steps{
                  ansiblePlaybook credentailsID: 'private-key', disableHostKeyChecking: true, installation: 'ansible2', inventory: 'dev.inv', playbook: 'apache.yaml,
             }
       }
  }
}

multibranch pipeline
install pipeline pluging and multibranch scan webhook trigger -> create the multibranch pipeline job -> and configure the github

Master and slave node configuration:
Manage Jenkins --> Manage nodes and clouds --> New node

Name: uniquely identifies an agent within this Jenkins installation
Description:
Number of executors: 2
Remote root directory: /home/ec2-user/maven-agent
Labels: Labels (or tags) are used to group multiple agents into one logical group.

launch the agent.jar on the slave node to connect with the Master jenkins

  echo "secret_key" > secret-file
  java -jar agent.jar -jnlpUrl http://<Jenkins_URL>/computer/abc/jenkins-agent.jnlp -secret @secret-file -workDir "/home/ec2-user" --> hit this command to connect
  master jenkiins
  
  while creating the job select the option like { Restrict where this project can be run } and give the label.

How to build and deploy image on to the DockerHub through jenkins pipeline??
step:-1
	log in to the dockerhub -> settings -> security -> assign the permissions -> generate access token 
step:- 2
	manage jenkins -> manage credentails -> give the username and password as access token, give the credentailsID (ex:- anil-hub-devops)
step:- 3
	create the pipeline job
	
	pipeline {
    agent any 
    environment {
    DOCKERHUB_CREDENTIALS = credentials('anil-hub-devops')
    }
    stages { 
        stage('SCM Checkout') {
            steps{
            git 'https://github.com/ravdy/nodejs-demo.git'
            }
        }

        stage('Build docker image') {
            steps {  
                sh 'docker build -t anil/nodeapp:$BUILD_NUMBER .'
            }
        }
        stage('login to dockerhub') {
            steps{
                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
            }
        }
        stage('push image') {
            steps{
                sh 'docker push anil/nodeapp:$BUILD_NUMBER'
            }
        }
}
post {
        always {
            sh 'docker logout'
        }
    }
}


tomcat pipeline to deploy war file on to the tomcat 

pipeline {
	agent any
	environment {
		PATH = "/opt/apache-maven-3.6.3/bin:$PATH"
	}
	stages {
		stage ("clone code") {
			steps{
				git credentialsId: 'git_credentials', url: '<github_url>'
			{
		}
		stage ("build code"){
			steps{
				sh "mvn clean install"
			}
		}
		stage ("deploy"){
			steps{
			  sshagent(['deploy_user']){
			sh "scp -o StrickHostkeyChecking=no <src_file> username@IP:<dest_path>"
			
				}
			}
		}
		
	}
 }

















  
  
