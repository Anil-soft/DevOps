* Kubernetes Components
  * MASTER Components
    ETCD - ETCD data store stores information regarding nodes,pods, configs, roles, accounts and secrets.
         every information you see when you run kubectl get command that information from ETCD. it stores
         the information in key value format.
   
   kube-apiserver - when run kubectl command that kubectl utility reaches the kube-apiserver kubeapi server
         authenticates the request and validates and then retrieve the information from ETCD.
                    
   kube controller manager - manages various controllers in kubernetes, contineously monitors the status of the pods
        and takes the necessary actions to remediate the situation
                             
   Node controller - contineously monitors the status of the nodes, taking necessary actions to keep the application
        running
        
   Replication controller - contineously monitors the replicasets, desired number of replica sets are running or not,
      if a pod dies it creates another one.
      
  Kube scheduler - it should decide which pod should go to which node
  
* Node Components
  kubelet - An agent that runs on each node in the cluster. It makes sure that containers are running in a Pod.
  
  kube-proxy - kube-proxy is a network proxy that runs on each node in your cluster, kube-proxy maintains network rules on nodes. 
    These network rules allow network communication to your Pods
   
  Container runtime - The container runtime is the software that is responsible for running containers.
         
<== POD ==> 
   A Pod (as in a pod of whales or pea pod) is a group of one or more containers, 
   with shared storage and network resources, and a specification for how to run the containers.
   In terms of Docker concepts, a Pod is similar to a group of Docker containers with shared namespaces and shared filesystem volumes.
      
   YAML file containes:- 
   apiVersion - Which version of the Kubernetes API you're using to create this object
   kind - What kind of object you want to create
   metadata - Data that helps uniquely identify the object, including a name string, UID, and optional namespace
   spec - What state you desire for the object
   
   <== commands ==>
   - kubectl get pods (to check how many pods exist on the system)
   - kubectl run nginx --image=nginx ( to create the pod from nginx image)
   - kubectl describe pod nginx ( to describe and to know more about the pod )
   - kubectl delete pod webapp ( to delete the pod )
   - kubectl run redis --image=redis123 --dry-run=client -o yaml > redis-definition.yaml
   
  <== YAML file to create the pod ==>
  
apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  containers:
  - name: nginx
    image: nginx:1.14.2
    ports:
    - containerPort: 80
   
<== Replicaset ==> 
 - A ReplicaSet ensures that a specified number of pod replicas are running at any given time. 
 - However, a Deployment is a higher-level concept that manages ReplicaSets and provides declarative updates to Pods along with a lot of other useful features.
 - Therefore, we recommend using Deployments instead of directly using ReplicaSets, unless you require custom update orchestration or don't require updates at all.
 
 <== commands ==>
 - kubectl replace -f replicaset-definition.yaml
 - kubectl scale --replicas=6 -f replicaset-definition.yaml
 - kubectl scale --replicas=6 replicaset myapp-replicaset
 - 
 <== YAML file to create the replicaset ==>
  
  apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: replicaset-1
spec:
  replicas: 2
  selector:
    matchLabels:
      tier: frontend
  template:
    metadata:
      labels:
        tier: frontend
    spec:
      containers:
      - name: nginx
        image: nginx
         
<== deployment ==>
 - You can define Deployments to create new ReplicaSets, or to remove existing Deployments and adopt all their resources with new Deployments.
 - A new ReplicaSet is created and the Deployment manages moving the Pods from the old ReplicaSet to the new one at a controlled rate.
 - Each new ReplicaSet updates the revision of the Deployment.
         
<== commands ==>
  - kubectl create deployment --image=nginx nginx
  - kubectl create deployment --image=nginx nginx --dry-run=client -o yaml
  - kubectl create deployment --image=nginx nginx --dry-run=client -o yaml > nginx-deployment.yaml
  - kubectl create -f nginx-deployment.yaml
  - kubectl create deployment --image=nginx nginx --replicas=4 --dry-run=client -o yaml > nginx-deployment.yaml
  - kubectl set image deployment/nginx-deployment nginx=nginx:1.16.1 ( update the nginx Pods to use the nginx:1.16.1 image instead of the nginx:1.14.2 image)
  - kubectl rollout status deployment/nginx-deployment ( To see the rollout status )
  - kubectl rollout undo deployment/nginx-deployment ( undo the current rollout and rollback to the previous revision )
  Note:- you can pause rollouts for that Deployment before you trigger one or more updates
  - kubectl rollout pause deployment/nginx-deployment
  - kubectl rollout history deployment/nginx-deployment
  - kubectl rollout resume deployment/nginx-deployment
  
* Progressing Deployment
 - The Deployment creates a new ReplicaSet
 - The Deployment is scaling up its newest ReplicaSet
 - The Deployment is scaling down its older ReplicaSet
 - New Pods become ready or available
  
<== YAML file to create deployment ==>

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployment-1
spec:
  replicas: 2
  selector:
    matchLabels:
      name: busybox-pod
  template:
    metadata:
      labels:
        name: busybox-pod
    spec:
      containers:
      - name: busybox-container
        image: busybox888
        command:
        - sh
        - "-c"
        - echo Hello Kubernetes! && sleep 3600
  
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
