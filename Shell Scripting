  #!/bin/bash => shebang line which means which bash you are using
  ls 1>succ.txt 2>err.txt => store succ msg in succ.txt file and store error msg in err.txt file.
  java -version 1>jav_ver.txt 2>&1  => store error also where 1 is storing
  &>file_name => both succ and err stored into single file
  awk 'NR>=6 && NR<=12 {print}' file.txt  => to print the lines between the range
  sed -n '2,12p' file.txt  => print between the range
  
 {grep}
 grep bash file.txt  => search word in single file
 grep bash *  => search word in all the files
 echo "this is anil" | grep anil  => passing echo command output as input to the grep command
 cat file.txt | grep "line 12"  => to search the word in a file
 cat test.txt | grep -w line  => exact word in the file
 grep -c "line" test.txt  => to count the given string
 grep -wC 1 "line" test.txt => before and after one line for the given string
 -A => after one line
 -B => below one line
 -v => which are not having given string
 man grep => to check all options and flags
 grep -f my_search test.txt => to fetch the collections of the words through a file
 grep -E "line|anil|devops" test.txt  => to search multiple strings
 grep -E "^anil" test.txt => to search the lines which are started with given string
 grep -E "anil$" test.txt => search the string end of the line
 grep -E "^$" test.txt  => match for the empty line
 grep -E "\." test.txt  => printing the line which are having dots
 ls -lrt | grep -E "^d" => to print only directories 
 
 {cut}
 cut -c 1 /etc/passwd => to print first character from file
 cut -c 4-9 /etc/passwd => to print character range
 cut -f 1,3 file.txt  => to print the range from 1 to 3 {-f is field separator}
 cut -d ':' -f 1 /etc/passwd  => print first field {field separator -d with :}
 cut -d ' ' -sf 1 file.txt  => to print the first field space separator 
 httpd -v | grep -E "version" | cut -d '/' -f 2 | cut -d ' ' -f 1
 
 {echo}
 ex:-
#!/bin/bash
a="anil kumar"
echo "my name is $a"
echo "$a has done DevOps course"
echo "this is $a from Anantapur"

v=$(httpd -v)   => assgning httpd -v output into the variable v
eccho $v

ex:- to find out the versions
!/bin/bash
httpd_version=$(httpd -v | awk -F '[ /]' '/version/ {print $4}')
docker_version=$(docker -v | awk '/version/ {print $3}' | tr -d ",")
docker_status=$(systemctl status docker | awk '/active/ {print $3}' | tr -d "[()}")
echo "The httpd version is: $httpd_version"
echo "The docker version is: $docker_version"
echo "Docker status is: $docker_status"

ex:- printing multiple lines
#!/bin/bash
cat << EOF
the user is: $USER
home for this $USER is: $HOME
EOF

ex:-2
#!/bin/bash
cat << EOF > output.txt
the user is: $USER
home for this $USER is: $HOME
EOF

tr [a-z] [A-Z] <<<"this is anil"    => convert from small to capital letters













































 
 
